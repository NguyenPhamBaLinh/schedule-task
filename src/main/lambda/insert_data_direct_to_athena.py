# b·∫≠t terminal g√µ l·ªánh pip install psycopg2 boto3 pandas ƒë·ªÉ install lib
import psycopg2
import json
import logging
import os
import datetime
import boto3
import pandas as pd
from io import BytesIO

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def send_email_notification(subject, body, to_email):
    sender_email = "ngoccuongbich6972@gmail.com"
    sender_password = "irhj rbzg zxak fxrq"  # Thay b·∫±ng App Password n·∫øu d√πng x√°c th·ª±c 2 b∆∞·ªõc

    msg = MIMEMultipart()
    msg["From"] = sender_email
    msg["To"] = to_email
    msg["Subject"] = subject

    msg.attach(MIMEText(body, "plain"))

    try:
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()  # B·∫≠t m√£ h√≥a TLS
            server.login(sender_email, sender_password)  # ƒêƒÉng nh·∫≠p
            server.sendmail(sender_email, to_email, msg.as_string())  # G·ª≠i email

        logger.info("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng qua Gmail!")
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi g·ª≠i email qua Gmail: {str(e)}")

def check_directory_and_files_in_s3(bucket_name, prefix):
    """
    Ki·ªÉm tra th∆∞ m·ª•c c√≥ t·ªìn t·∫°i v√† c√≥ ch·ª©a file kh√¥ng trong S3.
    :param bucket_name: T√™n bucket
    :param prefix: ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c (k·∫øt th√∫c b·∫±ng "/")
    :return: Tuple (has_file, file_count, file_names)
             has_file: True n·∫øu c√≥ √≠t nh·∫•t m·ªôt file
             file_count: S·ªë l∆∞·ª£ng file
             file_names: Danh s√°ch t√™n file
    """
    s3 = boto3.client('s3')

    try:
        # L·∫•y danh s√°ch ƒë·ªëi t∆∞·ª£ng trong th∆∞ m·ª•c
        response = s3.list_objects_v2(Bucket=bucket_name, Prefix=prefix)

        if 'Contents' not in response:
            logger.info(f"Th∆∞ m·ª•c {prefix} kh√¥ng t·ªìn t·∫°i ho·∫∑c r·ªóng.")
            return False, 0, []

        # L·ªçc ra c√°c file (b·ªè qua th∆∞ m·ª•c c√≥ size = 0)
        files = [obj for obj in response['Contents'] if obj['Size'] > 0]
        file_names = [obj['Key'].split('/')[-1] for obj in files]
        file_count = len(files)

        return file_count > 0, file_count, file_names
    except Exception as e:
        logger.error(f"L·ªói khi ki·ªÉm tra th∆∞ m·ª•c trong S3: {str(e)}")
        return False, 0, []

# H√†m g·ª≠i email th√¥ng qua AWS SES
# def send_email_notification(subject, body, to_email):
#     ses = boto3.client('ses', region_name='ap-southeast-1')
#     RECIPIENT = "cuongnv37@tnexfinance.com.vn"
#     try:
#         response = ses.send_email(
#             Source='ittnexfinance@tnexfinance.com.vn',
#             Destination={
#                 'ToAddresses': [RECIPIENT],
#             },
#             Message={
#                 'Subject': {'Data': subject},
#                 'Body': {'Text': {'Data': body}},
#             },
#         )
#         logger.info(f"Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng: {response}")
#     except Exception as e:
#         logger.error(f"L·ªói khi g·ª≠i email: {str(e)}")

def handle_string(value):
    """X·ª≠ l√Ω chu·ªói, gi·ªØ l·∫°i s·ªë 0 ·ªü ƒë·∫ßu n·∫øu c√≥."""
    if pd.isna(value) or value == "":
        return None  # N·∫øu gi√° tr·ªã l√† NaN ho·∫∑c r·ªóng, tr·∫£ v·ªÅ None
    # Ki·ªÉm tra n·∫øu gi√° tr·ªã l√† chu·ªói c√≥ ch·ª©a s·ªë 0 ·ªü ƒë·∫ßu v√† tr·∫£ l·∫°i chu·ªói ban ƒë·∫ßu
    if isinstance(value, str):
        return value.strip()  # Tr·∫£ l·∫°i chu·ªói ban ƒë·∫ßu m√† kh√¥ng thay ƒë·ªïi g√¨
    return str(value)  # N·∫øu kh√¥ng ph·∫£i l√† chu·ªói, chuy·ªÉn th√†nh chu·ªói b√¨nh th∆∞·ªùng

def handle_number(value):
    """X·ª≠ l√Ω s·ªë, thay NaN ho·∫∑c None th√†nh 0 ho·∫∑c gi√° tr·ªã h·ª£p l·ªá."""
    if pd.isna(value) or value is None:
        return 0  # Thay NaN ho·∫∑c None th√†nh 0
    try:
        # N·∫øu l√† chu·ªói s·ªë c√≥ d·∫•u th·∫≠p ph√¢n, th·ª≠ chuy·ªÉn th√†nh float
        if isinstance(value, str):
            value = value.replace(",", "")  # X·ª≠ l√Ω n·∫øu c√≥ d·∫•u ph·∫©y trong s·ªë
        return float(value)  # Chuy·ªÉn ƒë·ªïi gi√° tr·ªã th√†nh ki·ªÉu float n·∫øu c√≥ th·ªÉ
    except ValueError:
        return 0  # N·∫øu kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi th√†nh float, tr·∫£ v·ªÅ 0

def handle_timestamp(value):
    if pd.isna(value) or value is None:
        return None  # Ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c·∫ßn
    elif isinstance(value, int):  # N·∫øu gi√° tr·ªã l√† ki·ªÉu integer, c√≥ th·ªÉ l√† timestamp d·∫°ng s·ªë
        return datetime.fromtimestamp(value)  # Chuy·ªÉn t·ª´ integer sang timestamp
    return value

# üìå H√†m INSERT cho b·∫£ng case_collection_debt
def insert_into_case_collection_debt(df, cursor):
    logger.info(f"=============start insert_into_case_collection_debt =======================")
    try:
        logger.info(f"DataFrame columns: {df.columns}")
        for _, row in df.iterrows():
            cursor.execute("""
                INSERT INTO collection_debt.case_collection_debt (
                    customer_id
                    , contract_number
                    , product_name
                    , dpd
                    , to_collect
                    , total_paid
                    , principle_outstanding
                    , principle_overdue
                    , interest_overdue
                    , tenor
                    , disbursement_date
                    , disbursement_amount
                    , approved_amount
                    , overdue_amount
                    , interest_outstanding
                    , remain_total
                    , fee_overdue
                    , emi
                    , due_date
                    , created_time
                    , updated_time
                    , terminal_fee
                    , interest_rate
                    , default_risk_segment
                    , bucket
                    , start_date
                    , end_date
                    , next_due_date
                    , first_due_date
                    , last_payment_date
                    , last_payment_amount
                    , last_action_code
                    , debt_sale_date
                    , balance_amount
                    , period_bucket
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW(), %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
                handle_string(row["cus_id"]),
				handle_string(row["case_code"]),
				handle_string(row["product_name"]),
				handle_number(row["dpd"]),
				handle_number(row["to_collect"]),
				handle_number(row["total_paid"]),
				handle_number(row["principle_outstanding"]),
				handle_number(row["principle_overdue"]),
				handle_number(row["interest_overdue"]),
				handle_number(row["tenor"]),
				handle_timestamp(row["disbursement_date"]),
				handle_number(row["disbursement_amount"]),
				handle_number(row["approved_amount"]),
				handle_number(row["overdue_amount"]),
				handle_number(row["interest_outstanding"]),
				handle_number(row["remain_total"]),
				handle_number(row["fee_overdue"]),
				handle_number(row["emi"]),
				handle_timestamp(row["due_date"]),
				handle_number(row["other_charges"]),
				handle_number(row["interest_product"]),
				handle_string(row["risk_segment"]),
                handle_string(row["bucket"]),
                handle_timestamp(row["start_date"]),
                handle_timestamp(row["end_date"]),
                handle_timestamp(row["next_due_date"]),
                handle_timestamp(row["first_due_date"]),
                handle_timestamp(row["last_payment_date"]),
                handle_number(row["last_payment_amount"]),
                handle_string(row["last_action_code"]),
                handle_timestamp(row["debt_sale_date"]),
                handle_number(row["balance_amount"]),
                handle_string(row["period_bucket"])
        ))
    except Exception as e:
        logger.error(f"L·ªói insert_into_case_collection_debt: {str(e)}")
    logger.info(f"======================End insert_into_case_collection_debt =======================")

# üìå H√†m UPSERT (INSERT n·∫øu ch∆∞a c√≥, UPDATE n·∫øu ƒë√£ c√≥) cho b·∫£ng case_customer_info_debt
def upsert_case_customer_info_debt(df, cursor):
    logger.info(f"======================Start upsert_case_customer_info_debt =======================")
    for index, row in df.iterrows():
        try:
            logger.info(f"Customer Mobile: {row['customer_mobile']}")

            id_issue_date = pd.to_datetime(row['id_issue_date']).strftime('%Y-%m-%d %H:%M:%S') if pd.notna(row['id_issue_date']) else None
            logger.info(f"======================value row {row}")
            logger.info(f"Customer Mobile: {row['customer_mobile']}")
            cursor.execute("""
                INSERT INTO collection_debt.case_customer_info_debt (
                    customer_id, customer_name, phone, gender, birth_day, national_id_number,
                    id_issue_date, id_issue_place, citizen_id_number, citizen_issue_date, citizen_issue_place,
                    per_address, per_ward, per_district, per_province, cur_address, cur_ward, cur_district, cur_province,
                    ref1_name, ref1_number, ref1_relationship, ref2_name, ref2_number, ref2_relationship, tenor,
                    casa_account, ref1_work_add, ref2_work_add, work_name, work_type, martial_status,
                    fb_number, fb_owner,
                    created_time, updated_time, account_state, is_col_contact, customer_channel
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                        %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                        NOW(), NOW(), 'ACTIVE_IN_ARREARS', FALSE, 'DIRECT')
                ON CONFLICT (customer_id)
                DO UPDATE SET
                    customer_name = EXCLUDED.customer_name,
                    phone = EXCLUDED.phone,
                    gender = EXCLUDED.gender,
                    birth_day = EXCLUDED.birth_day,
                    national_id_number = EXCLUDED.national_id_number,
                    id_issue_date = EXCLUDED.id_issue_date,
                    id_issue_place = EXCLUDED.id_issue_place,
                    citizen_id_number = EXCLUDED.citizen_id_number,
                    citizen_issue_date = EXCLUDED.citizen_issue_date,
                    citizen_issue_place = EXCLUDED.citizen_issue_place,
                    per_address = EXCLUDED.per_address,
                    per_ward = EXCLUDED.per_ward,
                    per_district = EXCLUDED.per_district,
                    per_province = EXCLUDED.per_province,
                    cur_address = EXCLUDED.cur_address,
                    cur_ward = EXCLUDED.cur_ward,
                    cur_district = EXCLUDED.cur_district,
                    cur_province = EXCLUDED.cur_province,
                    ref1_name = EXCLUDED.ref1_name,
                    ref1_number = EXCLUDED.ref1_number,
                    ref1_relationship = EXCLUDED.ref1_relationship,
                    ref2_name = EXCLUDED.ref2_name,
                    ref2_number = EXCLUDED.ref2_number,
                    ref2_relationship = EXCLUDED.ref2_relationship,
                    tenor = EXCLUDED.tenor,
                    casa_account = EXCLUDED.casa_account,
                    ref1_work_add = EXCLUDED.ref1_work_add,
                    ref2_work_add = EXCLUDED.ref2_work_add,
                    work_name = EXCLUDED.work_name,
                    work_type = EXCLUDED.work_type,
                    martial_status = EXCLUDED.martial_status,
                    fb_number = EXCLUDED.fb_number,
                    fb_owner = EXCLUDED.fb_owner,
                    updated_time = NOW()
                """,
                (
                    handle_string(row['cus_id']),
                    handle_string(row['full_name']),
                    handle_string(row['customer_mobile']),
                    handle_string(row['gender']),
                    handle_timestamp(row['dob']),
                    handle_string(row['national_id_number']),
                    id_issue_date,
                    handle_string(row['id_issue_place']),
                    handle_string(row['citizen_id_number']),
                    handle_timestamp(row['citizen_issue_date']),
                    handle_string(row['citizen_issue_place']),
                    handle_string(row['per_address']),
                    handle_string(row['per_ward']),
                    handle_string(row['per_district']),
                    handle_string(row['per_province']),
                    handle_string(row['cur_address']),
                    handle_string(row['cur_ward']),
                    handle_string(row['cur_district']),
                    handle_string(row['cur_province']),
                    handle_string(row['ref1_name']),
                    handle_string(row['ref1_number']),
                    handle_string(row['ref1_relationship']),
                    handle_string(row['ref2_name']),
                    handle_string(row['ref2_number']),
                    handle_string(row['ref2_relationship']),
                    handle_number(row['tenor']),
                    handle_string(row['casa']),
                    handle_string(row['ref1_workadd']),
                    handle_string(row['ref2_workadd']),
                    handle_string(row['work_name']),
                    handle_string(row['work_type']),
                    handle_string(row['martial_status']),
                    handle_string(row['fb_number']),
                    handle_string(row['fb_owner'])
                )
            )
        except Exception as e:
            print(f"‚ùå L·ªói khi insert customer_id {row['cus_id']}: {e}")
            cursor.connection.rollback()  # Rollback n·∫øu c√≥ l·ªói
    logger.info(f"======================End upsert_case_customer_info_debt =======================")

# üìå H√†m INSERT cho b·∫£ng case_payment_history
def insert_into_case_payment_history(df, cursor):
    logger.info(f"======================Start insert_into_case_payment_history =======================")

    # B·ªè c·ªôt ƒë·∫ßu ti√™n n·∫øu c·∫ßn thi·∫øt
    df = df.iloc[:, 1:]

    for _, row in df.iterrows():

        if pd.isna(row["payment_date"]) or pd.isna(row["payment_amount"]):
            logger.warning(f"B·ªè qua b·∫£n ghi do thi·∫øu d·ªØ li·ªáu: {row.to_dict()}")
            continue  # B·ªè qua b·∫£n ghi n√†y v√† ti·∫øp t·ª•c v√≤ng l·∫∑p

        cursor.execute("""
            INSERT INTO collection_debt.case_payment_history (
                customer_id, contract_number, payment_date, ref_transaction_id,
                payment_amount, note, created_time, updated_time
            ) VALUES (%s, %s, %s, %s, %s, %s, NOW(), NOW())  -- created_time & updated_time = NOW()
        """, (
            handle_string(row["cus_id"]),
            handle_string(row["case_code"]),
            handle_timestamp(row["payment_date"]),
            handle_string(row["ref_transaction_id"]),
            handle_number(row["payment_amount"]),
            handle_string(row["note"])
        ))

    logger.info(f"======================End insert_into_case_payment_history =======================")

# üìå H√†m INSERT cho b·∫£ng case_payment_schedule
def insert_into_case_payment_schedule(df, cursor):
    logger.info(f"======================Start insert_into_case_payment_schedule =======================")

    # B·ªè c·ªôt ƒë·∫ßu ti√™n v√† c·ªôt th·ª© nƒÉm
    df = df.iloc[:, 1:]  # B·ªè c·ªôt ƒë·∫ßu ti√™n
    df = df.drop(df.columns[4], axis=1)  # B·ªè c·ªôt th·ª© nƒÉm (t√≠nh t·ª´ 0)

    # ƒê·ªãnh nghƒ©a h√†m ki·ªÉm tra gi√° tr·ªã numeric h·ª£p l·ªá
    def check_numeric(value):
        # N·∫øu gi√° tr·ªã l√† None ho·∫∑c NaN, tr·∫£ v·ªÅ 0
        if value is None or pd.isna(value):
            return 0.0
        # N·∫øu gi√° tr·ªã l√† ki·ªÉu string v·ªõi ph·∫ßn th·∫≠p ph√¢n, √©p ki·ªÉu th√†nh float
        try:
            return float(value)
        except ValueError:
            return 0.0

    for _, row in df.iterrows():
        # L·∫•y c√°c gi√° tr·ªã t·ª´ h√†ng v√† x·ª≠ l√Ω gi√° tr·ªã NULL
        customer_id = row.get('cus_id')  # Thay 'cus_id' b·∫±ng t√™n c·ªôt th·ª±c t·∫ø trong DataFrame
        contract_number = row.get('case_code')  # Thay 'case_code' b·∫±ng t√™n c·ªôt th·ª±c t·∫ø
        installment_number = row.get('installment_number')
        due_date = row.get('end_date')  # Thay 'end_date' b·∫±ng t√™n c·ªôt th·ª±c t·∫ø

        # S·ª≠ d·ª•ng h√†m check_numeric ƒë·ªÉ ƒë·∫£m b·∫£o gi√° tr·ªã ƒë√∫ng ƒë·ªãnh d·∫°ng
        principle_amt = check_numeric(row.get('principle_amt'))
        interest_amt = check_numeric(row.get('interest_amt'))
        other_fees = check_numeric(row.get('other_fees'))
        sum_amt = check_numeric(row.get('sum_amt'))
        principle_balance = check_numeric(row.get('principle_balance'))

        # T·∫°o tuple cho gi√° tr·ªã
        values = (
            customer_id,
            contract_number,
            installment_number,
            due_date,
            principle_amt,
            interest_amt,
            other_fees,
            sum_amt,
            principle_balance
        )

        # Th·ª±c hi·ªán ch√®n
        cursor.execute("""
            INSERT INTO collection_debt.case_payment_schedule (
                customer_id, contract_number, installment_number, due_date,
                principle_amt, interest_amt, other_fees, sum_amt,
                principle_balance, created_time, updated_time
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW())
        """, values)

    logger.info(f"======================End insert_into_case_payment_schedule =======================")

def check_file_exists_in_s3(bucket_name, key):
    s3 = boto3.client('s3')
    try:
        s3.head_object(Bucket=bucket_name, Key=key)
        return True
    except Exception as e:
        logger.warning(f"File {key} kh√¥ng t·ªìn t·∫°i trong S3 s·∫Ω ƒë∆∞·ª£c b·ªè qua: {str(e)}")
        return False

def lambda_handler(event, context):
    logger.info(f"Lambda function b·∫Øt ƒë·∫ßu th·ª±c thi.")
    try:
        current_time = datetime.datetime.utcnow() + datetime.timedelta(hours=7)
        logger.info(f"current_time-----------{current_time}")
        formatted_time2y = current_time.strftime("%d%m%y")
        bucket_name = 'collection-partners-documents'
        prefix = f'data_direct_debt/data_{formatted_time2y}/'

        # Ki·ªÉm tra th∆∞ m·ª•c c√≥ t·ªìn t·∫°i v√† c√≥ ch·ª©a file hay kh√¥ng
        has_file, file_count, file_names = check_directory_and_files_in_s3(bucket_name, prefix)

        if not has_file:
            logger.warning(f"Th∆∞ m·ª•c {prefix} kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ file trong S3. G·ª≠i email th√¥ng b√°o.")
            subject = f"C·∫£nh B√°o Data Direct Athena"
            body = f"Th∆∞ m·ª•c {prefix} kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ch·ª©a file trong S3. Vui l√≤ng ki·ªÉm tra l·∫°i."
            send_email_notification(subject, body, "cuongnv37@tnexfinance.com.vn")
        else:
            logger.info(f"Th∆∞ m·ª•c {prefix} t·ªìn t·∫°i v√† c√≥ {file_count} file trong S3.")

            # Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng file nh·ªè h∆°n 3 nh∆∞ng l·ªõn h∆°n ho·∫∑c b·∫±ng 1
            if 1 <= file_count < 3:
                subject = f"C·∫£nh b√°o: Th∆∞ m·ª•c {prefix} c√≥ √≠t h∆°n 3 file"
                body = f"Th∆∞ m·ª•c {prefix} c√≥ {file_count} file. C√°c file trong th∆∞ m·ª•c l√†: {', '.join(file_names)}"
                send_email_notification(subject, body, "cuongnv37@tnexfinance.com.vn")

            # Thi·∫øt l·∫≠p k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu PostgreSQL
            logger.info("K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu PostgreSQL.")
            conn = psycopg2.connect(
                dbname=os.environ['DB_NAME'],
                user=os.environ['DB_USER'],
                password=os.environ['DB_PASSWORD'],
                host=os.environ['DB_HOST'],
                port=os.environ['DB_PORT']
            )
            conn.autocommit = False
            cursor = conn.cursor()

            try:
                current_time = datetime.datetime.utcnow()
                logger.info(f"current_time-----------{current_time}")
                # previous_day = current_time - datetime.timedelta(0)
                formatted_time2y = current_time.strftime("%d%m%y")

                logger.info(f"Formatted UTC time: {formatted_time2y}")

                s3 = boto3.client('s3')

                xlsx_files = [
                    f'data_direct_debt/data_{formatted_time2y}/case_schedule_{formatted_time2y}.xlsx',
                    f'data_direct_debt/data_{formatted_time2y}/cus_information_{formatted_time2y}.xlsx',
                    f'data_direct_debt/data_{formatted_time2y}/payment_history_{formatted_time2y}.xlsx'
                ]

                # Mapping t√™n file -> B·∫£ng database
                table_mappings = {
                    "case_schedule": ["case_payment_schedule"],
                    "cus_information": ["case_collection_debt","case_customer_info_debt"],
                    "payment_history": ["case_payment_history"]
                }

                for file_path in xlsx_files:
                    if not check_file_exists_in_s3(bucket_name, file_path):
                        logger.warning(f"File {file_path} kh√¥ng t·ªìn t·∫°i, b·ªè qua.")
                        continue
                    logger.info(f"file path name =============: {file_path}")
                    file_name_with_ext = file_path.split("/")[-1]  # L·∫•y t√™n file ƒë·∫ßy ƒë·ªß
                    logger.info(f"file full name =============: {file_name_with_ext}")
                    if formatted_time2y not in file_name_with_ext:
                        logger.warning(f"File {file_name_with_ext} kh√¥ng ch·ª©a ng√†y {formatted_time2y}, g·ª≠i email c·∫£nh b√°o v√† b·ªè qua.")
                        subject = f"C·∫£nh b√°o: File {file_name_with_ext} kh√¥ng h·ª£p l·ªá"
                        body = f"File {file_name_with_ext} kh√¥ng ch·ª©a ng√†y {formatted_time2y}. Vui l√≤ng ki·ªÉm tra l·∫°i."
                        send_email_notification(subject, body, "cuongnv37@tnexfinance.com.vn")
                        continue
                    file_name = "_".join(file_name_with_ext.rsplit("_", 1)[:-1])  # Lo·∫°i b·ªè ph·∫ßn ng√†y th√°ng

                    logger.info(f"file name cuted=============: {file_name}")

                    table_names = table_mappings.get(file_name, None)
                    logger.info(f"table name =============: {table_names}")
                    if not table_names:
                        logger.warning(f"Kh√¥ng c√≥ b·∫£ng t∆∞∆°ng ·ª©ng cho file {file_name}, b·ªè qua.")
                        continue

                    # T·∫£i file t·ª´ S3
                    obj = s3.get_object(Bucket=bucket_name, Key=file_path)
                    file_content = obj["Body"].read()
                    df = pd.read_excel(BytesIO(file_content), engine="openpyxl",
                     dtype={'customer_mobile': str
                     ,'national_id_number': str
                     ,'citizen_id_number':str
                     ,'ref2_number':str
                     ,'ref1_number':str
                     })

                    # G·ªçi c√°c h√†m x·ª≠ l√Ω cho t·ª´ng b·∫£ng
                    for table in table_names:
                        if table == "case_collection_debt":
                            insert_into_case_collection_debt(df, cursor)
                        elif table == "case_customer_info_debt":
                            upsert_case_customer_info_debt(df, cursor)
                        elif table == "case_payment_history":
                            insert_into_case_payment_history(df, cursor)
                        elif table == "case_payment_schedule":
                            insert_into_case_payment_schedule(df, cursor)

                # conn.commit()
                logger.info(f"D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ghi th√†nh c√¥ng v√†o PostgreSQL.")

            except Exception as e:
                conn.rollback()
                logger.error(f"L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω file: {str(e)}")
            finally:
                cursor.close()
                conn.close()
                logger.info("ƒê√£ ƒë√≥ng k·∫øt n·ªëi v·ªõi PostgreSQL.")

    except Exception as e:
        logger.error(f"L·ªói k·∫øt n·ªëi ƒë·∫øn PostgreSQL: {str(e)}")

